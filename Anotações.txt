Uma expressão regular sozinha é apenas uma string. É preciso ter um software para interpretar a regex e aplicá-la no alvo. Esse software é o Regex Engine que existe para a maioria das plataformas de desenvolvimento, como JavaScript, C#, Python, Ruby ou PHP.

Existem alguns caracteres que possuem um significado especial para o regex engine. Especial significa que o regex engine não interpreta o valor literal e sim diferente. Esses caracteres são chamados de meta caracteres.

Nessa aula já vimos alguns:

. o "ponto" que significa qualquer char
* o asterisco que serve para definir uma quantidade de chars, zero ou mais vezes
{} as chaves que servem para definir uma quantidade de caracteres específicas que é desejado encontrar
Por exemplo:

a{3} letra a 3 vezes.
\d* um digito zero ou mais vezes
Lembrando também, se quisermos procurar pelo * ou . literalmente (sem significado especial), devemos utilizar o caractere \

\. -> a barra invertida funciona como um escape para o ponto, pois o '.' é um meta caractere.

Atenção:

Exemplo de expressão para encontrar CNPJ: \d{2}\.\d{3}\.\d{3}\/\d{4}\-\d{2}

Observação: Dependendo um pouco da linguagem e regex engine que você usa, também pode ser necessário escapar o char /, ou seja, usando \/

O número do IP de um computador é gerado ao conectá-lo à internet, esse número permite que o dispositivo seja identificado e capaz de enviar/receber informações. Abaixo há alguns exemplos de IP:

126.1.112.34

128.126.12.244

192.168.0.34

Cada grupo pode ter de um a três algarismos. Considerando somente essa regra, como podemos encontrar o padrão desses números?

\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}

Um IP tem quatro grupos de no mínimo um e máximo três números. Repare que estamos escapando o ponto (.) entre os números, que são blocos de dígitos \d entre 1 e 3 caracteres {1,3}

Outro exemplo: (21) 3216-2345

Os parênteses são meta-chars e precisam ser utilizados para capturar o valor literal: \(e \)

Regex correta: \(\d{2}\) \d{4}-\d{4}

Quebrou a cabeça? O parênteses é um meta caracter de grupo, algo que ainda aprenderemos. Sendo assim, precisamos escapá-lo com um \ quando temos o interesse de encontrá-lo em uma string.

A regex não está perfeita pois o telefone poderia variar, por exemplo ter com 9 números ou um 0 na frente do DDD (além de definir melhor o espaço). Nos próximos capítulos veremos como definir essas possibilidades.


Possibilidades utilizando RegEx:

A) Extraindo seções específicas de um arquivo de texto
B) Validação de formatação de, por exemplo, e-mail ou telefone
C) Análise de arquivos de texto e extração de dados para, por exemplo, gravar no banco de dados
D) Substituindo os valores de um texto para limpar, reformatar ou alterar o conteúdo

Regex, ou expressões regulares, é uma linguagem para encontrar padrões de texto.
Sendo uma linguagem independente, existem interpretadores para a maioria das plataformas de desenvolvimento, como JavaScript, C#, Python ou Ruby.
Uma classe de caracteres predefinida é \d, que significa qualquer dígito.
Existem vários meta-char, como . ou *.
Existem quantifiers que definem quantas vezes um caractere deve aparecer:
{1} é um quantifier que significa uma vez.
* é um quantifier que significa zero, uma ou mais vezes
. é um meta-char que significa qualquer char.
Com \ podemos escapar meta-chars, por exemplo \.

regex que procura o <code> ou </code>:

</?code>
Repare que usamos o meta-char ? para sinalizar que o / é opcional.

Qual é a classe correta para definir os números entre 1 e 3 E 6 e 9?
[1-36-9]
Definimos uma classe com os números de 1-3 e 6-9!

? - zero ou uma vez.
* - zero ou mais vezes.
+ - uma ou mais vezes.
{n} - exatamente n vezes.
{n,} - no mínimo n vezes.
{n,m} - no mínimo n vezes, no máximo m vezes.

Quando queremos pegar qualquer quantidade de caracteres, por isso usaremos o atalho de classe \w que pega qualquer dígito, seja ele letra ou número:

PRÓXIMA ATIVIDADE

O que aprendemos?
Podemos definir facilmente a classe de qualquer caractere com o [A-Z].
Conhecemos todos os quantifiers como ?, +, * e {n}.
\s significa whitespace e é um atalho para [ \t\r\n\f].
\w significa word char e é uma atalho para [A-Za-z0-9_]

Existem âncoras predefinidas que selecionam uma posição dentro do alvo.
\b é uma âncora que seleciona um word boundary, isso é o início ou fim da palavra.
^ é uma âncora que seleciona o início da string alvo.
$ é uma âncora que seleciona o fim do alvo.

/////////////////

Muito cuidado para não confundir non-capturing groups com os quantifier. Ambos utilizam o mesmo símbolo (?), contudo possuem objetivos diferentes. Relembrando:

Non-Capturing group - (?:de\s+) (não deve devolver o grupo formado pela preposição de e por um \s)
Quantifier - [a-z]? (a classe deve ocorrer zero ou uma vez)

/////////////////

Mais uma dica, para definir dentro de um grupo que queremos um OU outro usamos o caractere | (pipe). Por exemplo, selecionando alfa OU beta, escrevemos (alfa|beta)

Segue uma possível regex:

([a-z.]{4,14}[a-z\d])@(?:caelum.com.br|alura.com.br)
Repare que o segundo grupo usa o pipe: | para selecionar email que terminam com caelum.com.br OU alura.com.br. Além disso, o grupo não é capturado (?:).

////////////////

Declaramos um grupo com ().
Podemos ter grupos e subgrupos.
Um grupo é retornado na hora de executar, são úteis para selecionar uma parte do match.
Através do ?:, dizemos que não queremos ver esse grupo na resposta

Todos os quantifiers são gananciosos por padrão. Isso significa que eles automaticamente selecionam o máximo de caracteres por padrão.

Lembrando que temos os seguintes quantifiers:

? (zero ou um caractere)
+ (um ou mais caracteres)
* (zero ou mais caracteres)
{n,m} (min n, max m caracteres)

/////////////////

<(p[1-9])>.*<\/\1>
No primeiro grupo há uma tag de prioridade que pode ir de 1 até 9, por isso: <(p[1-9])>
Podemos ter qualquer item no meio: .*
E por último, usamos o BackReference para garantir que a tag será fechada com a mesma tag usada na abertura, escapando a barra de fechamento da tag: <\/\1>

/////////////////

Podemos definir uma classe de caracteres que seleciona tudo que não é um >. Essa negação é feita através da meta-char ^.

<h1[^>]+>

Repare que usamos a classe em conjunto com o quantifier ganancioso: [^>]+

Mesmo assim foi encontrado apenas a abertura da tag pois a nossa classe de caractere não inclui a caractere >

/////////////////////////////////

Essa negação é algo muito comum nas regexes. Há circunstâncias em que é mais fácil definir o que não queremos em vez de dizer o que queremos. A negação ^ ajuda nisso. Isso também é a razão da existência de classes como \W (com W maiúsculo) e \D (com D maiúsculo).

O \W é a non-word char, ou seja tudo que não é um word char. \W é um atalho para [^\w].

A classe \D, por sua vez, é um non-digit, ou seja, \D é um atalho para [^\d]

Repare também que não usamos a meta-char ^ como âncora pois aparece dentro de uma classe [^>].

///////////////////////////////////

O que aprendemos?
Aprendemos que quantifiers são gananciosos por padrão e que podemos utilizar um ? logo após o quantifier, deixando-o preguiçoso. Também aprendemos como podemos referenciar o texto de um grupo dentro da regex, aonde n é o número do grupo.

<(p[1-9])>.*<\/\1>

///////////////////////////////////

https://regex101.com/

///////////////////////////////////





 